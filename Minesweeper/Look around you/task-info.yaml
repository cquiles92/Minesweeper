type: edu
custom_name: stage3
files:
- name: src/minesweeper/Main.java
  visible: true
  text: |
    package minesweeper;

    public class Main {
        public static void main(String[] args) {
            MinesweeperGame game = new MinesweeperGame();
            game.start();
        }
    }
  learner_created: false
- name: src/minesweeper/MinesweeperGame.java
  visible: true
  text: |
    package minesweeper;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.Scanner;

    public class MinesweeperGame {
        private static final char EMPTY_SPACE = '.';
        private static final char MINE = 'X';
        private char[][] mineField;

        Scanner scanner = new Scanner(System.in);

        public void start() {
            int numberOfMines = getNumberOfMines();
            mineField = generateGrid(numberOfMines);
            displayGrid(mineField);
        }

        private int getNumberOfMines() {
            System.out.println("How many mines do you want on the field?");
            return Integer.parseInt(scanner.nextLine());
        }

        private char[][] generateGrid(int numberOfMines) {
            char[][] field = new char[9][9];

            for (char[] line : field) {
                Arrays.fill(line, EMPTY_SPACE);
            }

            Random random = new Random();

            for (int i = 0; i < numberOfMines; i++) {

                int y = random.nextInt(field.length);
                int x = random.nextInt(field[y].length);
                if (field[x][y] == EMPTY_SPACE) {
                    placeMine(x, y, field);
                } else {
                    i--;
                }
            }
            return field;
        }

        private void placeMine(int xCoordinate, int yCoordinate, char[][] field) {
            field[xCoordinate][yCoordinate] = MINE;
        }

        private void displayGrid(char[][] mineField) {
            for (char[] line : mineField) {
                for (char space : line) {
                    System.out.print(space);
                }
                System.out.println();
            }
        }
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7202#comment
status: Solved
record: 2
